docker
======
docker system prune -f
docker image prune -f
docker rm -f $(docker ps -a -q)
docker volume rm $(docker volume ls -q)

Minikube
=========
minikube start --vm-driver=none
minikube status
minikube stop

Cluster-info
=============
kubectl cluster-info
kubectl cluster-info dump
kubectl version
kubedm --version

Pod
======
kubectl run <podName> --image=<imageName>
kubectl run <podName> --image=<imageName> --dry-run -o yaml > <podName>.yaml          (to create pod yaml 
file from commandline)

kubectl get po
kubectl get po -o wide
kubectl describe po <podName>
kubectl edit po <podName>
kubectl delete po <podName>
kubectl logs <podName>      (for latest log)
kubectl logs -f <podName>   (for continuous log)
kubectl create -f <podName>.yaml
kubectl delete -f <podName>.yaml
kubectl exec -it <podName> -c <containerName> -- /bin/bash     (to enter into pod container)
kubectl exec -it <podName> -c <containerName> -- <linuxCommand>     (to run linux command in a container)
kubectl get po <podName> -o jsonpath='{.spec.containers[*].name}'   (to list all containers of a pod) 

Edit Pod (if pod yaml file is not given)
------------------------------------------
kubectl get pod <podname> -o yaml > <podName>.yaml
kubectl edit po <podName>

ReplicationController/ReplicaSet
=================================
kubectl create -f <rcName>.yaml
kubectl create -f <rsName>.yaml
kubectl delete -f <rsName>.yaml
kubectl replace -f <rsName>.yaml (to update replicaset for having n no. of replica mentioned in rs yaml file)
kubectl scale -f --replicas=<any nmber> <rsName>.yaml
kubectl scale -f --replicas=<any nmber> replicaset <rsName>
kubectl get rs
kubectl delete rs <rsName>
kubectl describe rs <rsName>
kubectl edit rs <rsName>

Deployment
===========
kubectl create -f <deploymentName>.yaml
kubectl delete -f <deploymentName>.yaml
kubectl get deployments
kubectl get all (to get all list of k8s created resource)
kubectl describe deployment <deploymentName>
kubectl delete deployment <deploymentName>
kubectl edit deployment <deploymentName>

Deployment (Updates and Rollback)
---------------------------------
kubectl create -f <deploymentName> --record (to record the cause of change)
kubectl edit deployment <deploymentName> --record 
kubectl set image deploy <deploymentName> <imageName>=<imageName>:<Version> --record
kubectl rollout status deploy <deploymentName>
kubectl rollout history deploy <deploymentName>
kubectl rollout undo deploy <deploymentName>
kubectl rollout undo deploy <deploymentName> --to-revision=<no>

Note: 
Default strategy is RollingUpdate

Service
========
kubectl create -f <serviceName>.yaml
kubectl delete -f <serviceName>.yaml
kubectl get svc
kubectl delete svc <serviceName>
kubectl describe svc <serviceName>
kubectl edit svc <serviceName>

Note: 
Default service type  is ClusterIP

voting-app:v1
==============
kubectl apply -f <dirName>   (for creating all object at once)
kubectl delete -f <dirName>  (for deleting all object at once)
kubectl delete all --all     (for deleting all object at once)

kubectl formatting output
==========================
kubectl [command] [TYPE] [NAME] -o <output_format>
i.e.
-o json => Output a JSON format
-o name => Print only the resource name
-o wide => Output in the plain-text format
-o yaml => Output a YAML format

kubectl create namespace <namespaceName> --dry-run -o json
kubectl create namespace <namsepaceName> --dry-run -o yaml

Namespace
============
kubectl create -f <namespaceName>.yaml
kubectl create namespace <namespaceName>
kubectl get ns


kubectl get po -n <namespaceName>
kubectl get po --all-namespaces
kubectl get po -n kube-system (to list all pods )
kubectl get po -n default 

kubectl create -f <pod.yaml> -n <namespaceName>

Note: By default there are 4 system created namespace by Kubernetes.
Default => The default namespace for objects
kube-system =>  The namespace for objects created by the Kubernetes system
kube-public =>  This namespace is mostly reserved for cluster usage, in case that 
                some resources should be visible and readable publicly throughout the whole cluster.
kube-node-lease => Node leases allow the kubelet to send heartbeats so that 
                   the control plane can detect node failure.

Namespace and DNS
-------------------------------
When you create a Service, it creates a corresponding DNS entry. 
This entry is of the form <serviceName>.<namespaceName>.svc.cluster.local
                          i.e db-service.dev.svc.cluster.local
which means that if a container uses <serviceName> it will resolve to the service which is 
local to a namespace. We can use same for other namspaces also such as qa,stag,prod.

Set default Namespace by current-context
------------------------------------------
kubectl config current-context
kubectl config set-context $(kubectl config current-context) -n <namespaceName>

Imperative commands
=====================
a) for creating pod
-------------------- 
kubectl run <podName> --image=<imageName>
kubectl run <podName> --image=<imageName> --label=<key>=<value>
kubectl run <podName> --image=<imageName> --port=<portNo>
kubectl run <podName> --image=<imageName> --port=<portNo> --expose 
kubectl run <podName> --image=<imageName> --dry-run=client -o yaml 
kubectl run <podName> --image=<imageName> --dry-run=client -o yaml >  pod-definition.yaml


b) for creating deployment
--------------------------
kubectl create deployment <deploymentName> --image=<imageName>
kubectl create deployment <deploymentName> --image=<imageName> --dry-run -o yaml
kubectl create deployment <deploymentName> --image=<imageName> --dry-run=client -o yaml > deployment-definition.yaml
kubectl create deployment <deploymentName> --image=<imageName> --replicas=<number> --dry-run=client -o yaml > deployment-definition.yaml 

c) for creating service
------------------------ 
|_ as ClusterIP
kubectl expose pod <podName> --port=<portNo> --name <serviceName> --dry-run=client -o yaml
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
                OR
kubectl create service <svcType> <svcName> --tcp=<portNo>:<portNo> --dry-run=client -o yaml
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml

|_ as NodePort
kubectl expose pod <podName> --port=<portNo> --name <serviceName> --type=NodePort --dry-run=client -o yaml
kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml
                OR
kubectl create service <svcType> <svcName> --tcp=<portNo>:<portNo> --node-port=<portNo> --dry-run=client -o yaml
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

Config-Map
==========
a) Declarative way
------------------
kubeclt create -f <configMap>.yml
kubeclt delete -f <configMap>.yml
kubectl get cm
kubectl get cm <configMapName> -o yaml
kubectl describe cm <configMapName>
kubectl delete cm <configMapName>

b) Imperative way
-----------------
|_ configmap from label
kubectl create configmap <configMapName> --from-literal=<key>=<value> --from-literal=<key>=<value>
kubectl create configmap app-config --from-literal=APP_COLOR=blue --from-literal=APP_MODE=prod

|_ configmap from file
kubectl create configmap <configMapName> --from-file=<path-of-file>
  kubectl create configmap app-config --from-file=/files/ckad/ConfigMap/app-config.properties

Secret
======
a) Declarative way
------------------
kubectl create -f <secret>.yml
kubectl deploymentName -f <secret>.yml
kubectl get secret
kubectl get secret <secretName>
kubectl get secret <secretName> -o yaml
kubectl describe secret <secretName>
kubectl delete secret <secretName>

b) Imperative way
-----------------
|_ secret from label
kubectl create secret generic <secretName> --from-literal=<key>=<value> --from-literal=<key>=<value>
kubectl create secret generic app-secret --from-literal=DB_Host=mysql --from-literal=DB_User=root --from-literal=DB_Password=pass123

|_ secret from file
kubectl create secret generic <secretName> --from-file=<path-of-file>
kubectl create secret generic app-secret --from-file=/files/ckad/secret/app-secret.properties

Note: We should provide secret value in encoded/hash format.

Secret Encode
--------------
echo -n '<keyValue>' | base64
<EncodeValue>
i.e.
> echo -n 'mysql' | base64

> echo -n 'root' | base64

> echo -n 'pass123' | base64


Secret Decode
-------------
echo -n '<EncodeValue>' | base64 --decode
<keyValue>
i.e.
> echo -n '' | base64 --decode
mysql
> echo -n '' | base64 --decode
root
> echo -n '' | base64 --decode
pass123

Note: When we secret as a volume, so each secret Key Value becomes a file inside the secret Mount path.






