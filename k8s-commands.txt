docker
------------
docker system prune -f
docker image prune -f
docker rm -f $(docker ps -a -q)
docker volume rm $(docker volume ls -q)

Minikube
-------------
minikube start --vm-driver=none
minikube status
minikube stop

Cluster-info
--------------
kubectl cluster-info
kubectl cluster-info dump
kubectl version
kubedm --version

Pod
----
kubectl run <podName> --image=<imageName>
kubectl run <podName> --image=<imageName> --dry-run -o yaml > <podName>.yaml          (to create pod yaml 
file from commandline)

kubectl get po
kubectl get po -o wide
kubectl describe po <podName>
kubectl edit po <podName>
kubectl delete po <podName>
kubectl logs <podName>      (for latest log)
kubectl logs -f <podName>   (for continuous log)
kubectl create -f <podName>.yaml
kubectl delete -f <podName>.yaml
kubectl exec -it <podName> -c <containerName> -- /bin/bash     (to enter into pod container)
kubectl get po <podName> -o jsonpath='{.spec.containers[*].name}'   (to list all containers of a pod) 

ReplicationController/ReplicaSet
----------------------------------
kubectl create -f <rcName>.yaml
kubectl create -f <rsName>.yaml
kubectl delete -f <rsName>.yaml
kubectl replace -f <rsName>.yaml (to update replicaset for having n no. of replica mentioned in rs yaml file)
kubectl scale -f --replicas=<any nmber> <rsName>.yaml
kubectl scale -f --replicas=<any nmber> replicaset <rsName>
kubectl get rs
kubectl delete rs <rsName>
kubectl describe rs <rsName>
kubectl edit rs <rsName>

Deployment
--------------
kubectl create -f <deploymentName>.yaml
kubectl delete -f <deploymentName>.yaml
kubectl get deployments
kubectl get all (to get all list of k8s created resource)
kubectl describe deployment <deploymentName>
kubectl delete deployment <deploymentName>
kubectl edit deployment <deploymentName>

Deployment (Updates and Rollback)
---------------------------------
kubectl create -f <deploymentName> --record (to record the cause of change)
kubectl edit deployment <deploymentName> --record 
kubectl set image deploy <deploymentName> <imageName>=<imageName>:<Version> --record
kubectl rollout status deploy <deploymentName>
kubectl rollout history deploy <deploymentName>
kubectl rollout undo deploy <deploymentName>
kubectl rollout undo deploy <deploymentName> --to-revision=<no>

Note: 
Default strategy is RollingUpdate

Service
-----------
kubectl create -f <serviceName>.yaml
kubectl get svc
kubectl delete svc <serviceName>
kubectl describe svc <serviceName>
kubectl edit svc <serviceName>



